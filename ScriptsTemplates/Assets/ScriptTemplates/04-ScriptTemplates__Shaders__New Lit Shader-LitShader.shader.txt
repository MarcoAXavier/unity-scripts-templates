Shader "Lit/#SCRIPTNAME#"
{
    Properties
    {
        _MainTex ("Texture", 2D) = "white" {}
        _TexStrenght ("Texture Strenght", Range(-1,1)) = 1
        [HDR]_Color ("Color", Color) = (1,1,1,1)
    }
    SubShader
    {
        Tags { "RenderType"="Opaque" "LightMode"="ForwardBase" }

        Pass
        {
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag

            #include "UnityCG.cginc"
            #include "UnityLightingCommon.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float3 normal : NORMAL;
                float2 uv : TEXCOORD0;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                float3 worldNormal : TEXCOORD1;
                float3 worldPosition : TEXCOORD2;
                float4 vertex : SV_POSITION;
            };

            sampler2D _MainTex;
            float4 _MainTex_ST;
            float4 _Color;
            float _TexStrenght;

            v2f vert (appdata v)
            {
                v2f o;
                o.worldNormal = UnityObjectToWorldNormal(v.normal);
                o.worldPosition = mul(unity_ObjectToWorld, v.vertex);
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = TRANSFORM_TEX(v.uv, _MainTex);
                return o;
            }

            float4 frag (v2f i) : SV_Target
            {
                float4 col = lerp(1, tex2D(_MainTex, i.uv), _TexStrenght);
                col *= _Color;
                
                float3 lightDifference =  normalize(i.worldNormal - _WorldSpaceLightPos0.xyz);
                //inverts dot so the parallel lights get correctly calculated 
                float intensity = 1-dot(i.worldNormal, lightDifference);// + 1) * .5;
                //algebra is done to remap intensity to 0-1 range
                intensity = (intensity + 1) * 0.5;
                float3 lightDirection = saturate(intensity);
                col.rgb *= lightDirection.xyz * _LightColor0.rgb;
                col.a *= _LightColor0.a;
                return col;
            }
            ENDCG
        }
    }
}
